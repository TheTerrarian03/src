// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Command.

package robot.commands;
import edu.wpi.first.wpilibj2.command.CommandBase;
import edu.wpi.first.wpilibj.Timer;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import robot.subsystems.drivetrainSubSys;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class driveFwdCmd extends CommandBase {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
        private final drivetrainSubSys m_drivetrainSubSys;
    private double m_dist;
    private double m_pwr;
    private double m_hdg;
    private String m_Mode;
    private double m_timeOut;
    private boolean m_BrakeFlag;
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    Timer commandTmr = new Timer();
    int stallCtr = 0;
    final double START_TIME = 0.2;
    final double STALL_VELOCITY = 3.0;
    final double STOP_PWR = -0.50;
    double currStop_pwr = STOP_PWR;
    
    double currPwr;
    double tgtYaw;
    double m_RemainTgtDist, m_CurrTgtDist, currDist, currSpeed, currYaw, rotation_pwr;

    public enum DriveState { START, DRIVING, BRAKING, STALLED, ATEND, DONE };
    private DriveState mDriveState = DriveState.START;

    public enum DriveMode { CURRENT_HEADING, NEW_HEADING };
    private DriveMode mDriveMode = DriveMode.CURRENT_HEADING;

    private enum DriveDir { FWD, REV };
    private DriveDir mDriveDir = DriveDir.FWD;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS


    public driveFwdCmd(double dist, double pwr, double hdg, String Mode, double timeOut, boolean BrakeFlag, drivetrainSubSys subsystem) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        m_dist = dist;
        m_pwr = pwr;
        m_hdg = hdg;
        m_Mode = Mode;
        m_timeOut = timeOut;
        m_BrakeFlag = BrakeFlag;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        m_drivetrainSubSys = subsystem;
        addRequirements(m_drivetrainSubSys);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called when the command is initially scheduled.
    @Override
    public void initialize() {
        
        commandTmr.reset();
        commandTmr.start();
        m_drivetrainSubSys.resetEncoders();
        m_drivetrainSubSys.resetGyro();

        //  Setup
        if (m_Mode.equals("CURRENT_HEADING")) {
            mDriveMode = DriveMode.CURRENT_HEADING;
            tgtYaw = m_drivetrainSubSys.getGyroYaw();
        } else {
            mDriveMode = DriveMode.NEW_HEADING;
            tgtYaw = m_hdg;
        }

        if (m_dist < 0) { mDriveDir = DriveDir.REV; }
        else            { mDriveDir = DriveDir.FWD; }

        if ((mDriveDir == DriveDir.REV) && ( m_pwr > 0 ))   { m_pwr *= -1; }

        if (mDriveDir == DriveDir.FWD) {
            currStop_pwr = STOP_PWR;
        } else {
            currStop_pwr = -STOP_PWR;
        }
        mDriveState = DriveState.START;
    }

    // Called every time the scheduler runs while the command is scheduled.
    @Override
    public void execute() {
        currYaw = m_drivetrainSubSys.getGyroYaw();
        currDist = m_drivetrainSubSys.getCurrentDist();
        m_RemainTgtDist = m_dist - currDist;
        currSpeed = m_drivetrainSubSys.getCurrentVel();
        //------------Stopped State-----------\\
        if (mDriveState == DriveState.START){
            currPwr = m_pwr;
            if (commandTmr.get() > START_TIME) {
                mDriveState = DriveState.DRIVING;
            }
        }
        //-- test to see if we have stopped moving(collision)
        if ((mDriveState == DriveState.DRIVING) || (mDriveState == DriveState.BRAKING)){
            if (((mDriveDir == DriveDir.FWD) && (currSpeed <= STALL_VELOCITY)) ||
                ((mDriveDir == DriveDir.REV) && (currSpeed >= STALL_VELOCITY))){
                if (stallCtr >= 3) {
                    if (mDriveState == DriveState.DRIVING){
                        mDriveState = DriveState.STALLED;
                        return;
                    } else{
                        mDriveState = DriveState.ATEND;
                        return;
                    }
                }
                stallCtr++;
            } else {
                stallCtr = 0;
            }
        }

        if (mDriveState == DriveState.DRIVING){
            if (((mDriveDir == DriveDir.FWD) && (m_RemainTgtDist <= 0)) ||
                ((mDriveDir == DriveDir.REV) && (m_RemainTgtDist >= 0))){
                if (m_BrakeFlag) {
                    mDriveState = DriveState.BRAKING;
                    currPwr = currStop_pwr;
                } else {
                    mDriveState = DriveState.ATEND;
                    return;
                }
            }
        }
        // if we have not reached end continue giving power else stop
        if (mDriveState != DriveState.ATEND){
            m_drivetrainSubSys.curveDrive(currPwr, 0.0, false);
            //m_drivetrainSubSys.driveStraightToHdg(currPwr, tgtYaw);
        }
        /*
        if (currYaw > m_hdg) { rotation_pwr = (-currYaw - m_hdg)/360 + 0.02; 
                               System.out.println("----> Less than"); }
        else                 { rotation_pwr = (currYaw  + m_hdg)/360 + 0.02;
                             System.out.println("-> More than");}
        */

        rotation_pwr = (currYaw - m_hdg)/360;;;;;;;;;;;;;;;;;;;;;;;

        if       ((m_hdg - 0.1) < currYaw) { m_drivetrainSubSys.curveDrive(currPwr, -rotation_pwr, false); }
        else if  ((m_hdg + 0.1) > currYaw) { m_drivetrainSubSys.curveDrive(currPwr,  rotation_pwr, false); }
    
    
    
    
    }

    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) {
        m_drivetrainSubSys.stop();
    }

    // Returns true when the command should end.
    @Override
    public boolean isFinished() {
        if (commandTmr.get() > m_timeOut)       { return true; }
        if (mDriveState == DriveState.ATEND)    { return true; }
        if (mDriveState == DriveState.STALLED)  { return true; }
        return false;
    }

    @Override
    public boolean runsWhenDisabled() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
        return false;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
    }
}
