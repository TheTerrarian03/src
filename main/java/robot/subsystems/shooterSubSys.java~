// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package robot.subsystems;


import robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

import com.ctre.phoenix.motorcontrol.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonFX;
import com.ctre.phoenix.motorcontrol.can.WPI_VictorSPX;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class shooterSubSys extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    //-----------------------------------------------------------------\\
    //          Flywheel Constants and Variable Declarations           \\
    //-----------------------------------------------------------------\\

    public final static double LOW_GOAL_PWR = 0.20;
    public final static double HIGH_GOAL_PWR = 0.55;
    private double flyWheelPwr = 0;
    private double flyWheelRPM = 0;

    public final static int kSensorUnitsPerRotation = 2048;
    public final static int kUnitsPerRevolution = 2048;

    //------------------------------------------------------------------\\
    //          Handoff Motor Constant and Variable Decarations         \\
    //------------------------------------------------------------------\\
    private double handoffPower = 0;
    private double HANDOFF_SPEED = 0.25;




    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private WPI_TalonFX flywheelMotor;
private WPI_VictorSPX handoffMotor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public shooterSubSys() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
flywheelMotor = new WPI_TalonFX(6);
 
 

handoffMotor = new WPI_VictorSPX(7);
 
 


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        // Initialize 

        flywheelMotor.configFactoryDefault();
        flywheelMotor.setNeutralMode(NeutralMode.Brake);
        flywheelMotor.set(TalonFXControlMode.PercentOutput,0.0);




    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run
        updateShuffleboard();

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    //-----------------------------------------------------------------\\
    //                        Flywheel Methods                         \\
    //-----------------------------------------------------------------\\

    public void flywheelSetOnLowGoal() {
        flyWheelPwr = LOW_GOAL_PWR;
        flywheelMotor.set(TalonFXControlMode.PercentOutput, flyWheelPwr);
    }
    public void flywheelSetOnHighGoal() {
        flyWheelPwr = HIGH_GOAL_PWR;
        flywheelMotor.set(TalonFXControlMode.PercentOutput, flyWheelPwr);
    }
    public void flywheelStop(){
        flyWheelPwr = 0;
        flywheelMotor.set(TalonFXControlMode.PercentOutput, flyWheelPwr);
    }
    public double getFlywheelRPM(){
        double sensorVel = flywheelMotor.getSelectedSensorVelocity(0);  // position units per 100ms
        double vel_RotPerSec = sensorVel / kUnitsPerRevolution * 10;    // scale per100ms to perSecond
        double motorRPM = (vel_RotPerSec * 60.0);                       // scale persec to per min.
        flyWheelRPM = motorRPM * 2;                                     // Motor geared 2:1 for flywheel
        return flyWheelRPM;
    }

    //---------------------------------------------------------------\\
    //                    Handoff Methods                            \\
    //---------------------------------------------------------------\\

    public void handoffMotorStop() {
        handoffPower = 0;
        handoffMotor.set(handoffPower);
    }
    public void handoffMotorSet( double speed ) {
        handoffPower = speed;
        handoffMotor.set(handoffPower);
    }
    public void handoffMotorEject() {
        handoffPower = HANDOFF_SPEED;
        handoffMotor.set(handoffPower);
    }

    //------------------------------------------------------------\\
    //                        Shuffleboard                        \\
    //------------------------------------------------------------\\

    private void updateShuffleboard() {
        SmartDashboard.putNumber("Flywheel Motor Pwr", flyWheelPwr);
        SmartDashboard.putNumber("Flywheel RPM", getFlywheelRPM());
        SmartDashboard.putNumber("Handoff Motor Pwr", handoffPower);
    }



}

