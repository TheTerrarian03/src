// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package robot.subsystems;


import robot.commands.*;
import static edu.wpi.first.wpilibj.DoubleSolenoid.Value.*;

import edu.wpi.first.wpilibj.PneumaticsModuleType;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonFX;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.PneumaticsModuleType;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS



/**
 *
 */
public class intakeSubSys extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private DoubleSolenoid intakeValve;
private WPI_TalonFX intakeRollerMtr;
private Compressor compressor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    private final double ROLLERSTOPPEDSPEED = 0.0;
    private final double ROLLEREJECTSPEED = -0.5;
    private final double ROLLERRETRACTSPEED = 0.65;

    private enum RollerState {RETRACT, EJECT, STOPPED, RETRACTED}
    private RollerState rollerState = RollerState.STOPPED;

    private enum IntakeValveState {EXTENDED, RETRACTED};
    private IntakeValveState intakeValveState = IntakeValveState.RETRACTED;

    private static final DoubleSolenoid.Value VALVE_EXTEND_STATE = kForward;
    private static final DoubleSolenoid.Value VALVE_RETRACT_STATE = kReverse; 


    /**
    *
    */
    public intakeSubSys() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
intakeValve = new DoubleSolenoid(0, PneumaticsModuleType.CTREPCM, 0, 0);
 addChild("intakeValve", intakeValve);
 

intakeRollerMtr = new WPI_TalonFX(5);
 
 

compressor = new Compressor(0, PneumaticsModuleType.CTREPCM);
 addChild("compressor",compressor);
 


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

    enableCompressor();

    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run
        if (rollerState == RollerState.STOPPED)                  { intakeRollerMtr.set(ROLLERSTOPPEDSPEED); }
        else if (rollerState == RollerState.EJECT)               { intakeRollerMtr.set(ROLLEREJECTSPEED); }
        else if (rollerState == RollerState.RETRACT)             { intakeRollerMtr.set(ROLLERRETRACTSPEED); }
    
        if (intakeValveState == IntakeValveState.EXTENDED)       { intakeValve.set(VALVE_EXTEND_STATE); }
        else if (intakeValveState == IntakeValveState.RETRACTED) { intakeValve.set(VALVE_RETRACT_STATE); }
    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void rollerMotorEject()             { rollerState = RollerState.EJECT; }
    public void rollerMotorRetract()         { rollerState = RollerState.RETRACTED; }
    public void rollerMotorOff()               { rollerState = RollerState.STOPPED; }
    
    public void extendIntake()                 { intakeValveState = IntakeValveState.EXTENDED; }
    public void retractIntake()                { intakeValveState = IntakeValveState.RETRACTED; }

    public void disableCompressor()            { compressor.disable(); }
    public void enableCompressor()             { compressor.enableDigital(); }



}

